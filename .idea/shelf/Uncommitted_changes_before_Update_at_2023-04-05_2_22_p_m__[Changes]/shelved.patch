Index: src/com/codewithej/user/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.codewithej.user;\r\n\r\npublic class User {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/codewithej/user/User.java b/src/com/codewithej/user/User.java
--- a/src/com/codewithej/user/User.java	(revision af50b5b9a9cd4992661e1a54e36a3fe5ef2ffcfa)
+++ b/src/com/codewithej/user/User.java	(date 1680726049677)
@@ -1,4 +1,51 @@
 package com.codewithej.user;
 
+import java.util.Objects;
+import java.util.UUID;
+
 public class User {
+    private String name;
+    private UUID id;
+
+    public User(String name, UUID id) {
+        this.name = name;
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public UUID getId() {
+        return id;
+    }
+
+    public void setId(UUID id) {
+        this.id = id;
+    }
+
+    @Override
+    public String toString() {
+        return "User{" +
+                "name='" + name + '\'' +
+                ", id=" + id +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        User user = (User) o;
+        return Objects.equals(name, user.name) && Objects.equals(id, user.id);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(name, id);
+    }
 }
Index: src/com/codewithej/booking/Booking.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.codewithej.booking;\r\n\r\npublic class Booking {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/codewithej/booking/Booking.java b/src/com/codewithej/booking/Booking.java
--- a/src/com/codewithej/booking/Booking.java	(revision af50b5b9a9cd4992661e1a54e36a3fe5ef2ffcfa)
+++ b/src/com/codewithej/booking/Booking.java	(date 1680726049705)
@@ -1,4 +1,88 @@
 package com.codewithej.booking;
 
+import com.codewithej.car.Car;
+import com.codewithej.user.User;
+
+import java.time.LocalTime;
+import java.util.Objects;
+import java.util.UUID;
+
 public class Booking {
+    private User user;
+    private Car car;
+    private boolean isCanceled;
+    private UUID bookingID;
+    private LocalTime bookingTime;
+
+    public Booking(User user, Car car, boolean isCanceled, UUID bookingID, LocalTime bookingTime) {
+        this.user = user;
+        this.car = car;
+        this.isCanceled = isCanceled;
+        this.bookingID = bookingID;
+        this.bookingTime = bookingTime;
+    }
+
+    public User getUser() {
+        return user;
+    }
+
+    public void setUser(User user) {
+        this.user = user;
+    }
+
+    public Car getCar() {
+        return car;
+    }
+
+    public void setCar(Car car) {
+        this.car = car;
+    }
+
+    public boolean isCanceled() {
+        return isCanceled;
+    }
+
+    public void setCanceled(boolean canceled) {
+        isCanceled = canceled;
+    }
+
+    public UUID getBookingID() {
+        return bookingID;
+    }
+
+    public void setBookingID(UUID bookingID) {
+        this.bookingID = bookingID;
+    }
+
+    public LocalTime getBookingTime() {
+        return bookingTime;
+    }
+
+    public void setBookingTime(LocalTime bookingTime) {
+        this.bookingTime = bookingTime;
+    }
+
+    @Override
+    public String toString() {
+        return "Booking{" +
+                "user=" + user +
+                ", car=" + car +
+                ", isCanceled=" + isCanceled +
+                ", bookingID=" + bookingID +
+                ", bookingTime=" + bookingTime +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Booking booking = (Booking) o;
+        return isCanceled == booking.isCanceled && Objects.equals(user, booking.user) && Objects.equals(car, booking.car) && Objects.equals(bookingID, booking.bookingID) && Objects.equals(bookingTime, booking.bookingTime);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(user, car, isCanceled, bookingID, bookingTime);
+    }
 }
Index: src/com/codewithej/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.codewithej;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        displayMenu();\r\n        System.out.println();\r\n\r\n        int input = Integer.valueOf(scanner.nextLine());\r\n        cliAction(input);\r\n\r\n    }\r\n\r\n    private static void cliAction(int input) {\r\n        while (input != 7) {\r\n            switch (input) {\r\n                case 1:\r\n                    // Book Car\r\n                    break;\r\n                case 2:\r\n                    // View All User Booked Cars\r\n                    break;\r\n                case 3:\r\n                    // View All Bookings\r\n                    break;\r\n                case 4:\r\n                    // View Available Cars\r\n                    break;\r\n                case 5:\r\n                    // View Available Electric Cars\r\n                    break;\r\n                case 6:\r\n                    // View all users\r\n                    break;\r\n                case 7:\r\n                    // Exit\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Invalid Input\");\r\n            }\r\n\r\n            if (input != 7) {\r\n                System.out.println();\r\n                displayMenu();\r\n                System.out.println();\r\n            }\r\n\r\n            Scanner scanner = new Scanner(System.in);\r\n            input = Integer.valueOf(scanner.nextLine());\r\n        }\r\n    }\r\n\r\n    private static void displayMenu() {\r\n        System.out.println(\"1 - Book Car\");\r\n        System.out.println(\"2 - View All User Booked Cars\");\r\n        System.out.println(\"3 - View All Bookings\");\r\n        System.out.println(\"4 - View Available Cars\");\r\n        System.out.println(\"5 - View Available Electric Cars\");\r\n        System.out.println(\"6 - View All Users\");\r\n        System.out.println(\"7 - Exit\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/codewithej/Main.java b/src/com/codewithej/Main.java
--- a/src/com/codewithej/Main.java	(revision af50b5b9a9cd4992661e1a54e36a3fe5ef2ffcfa)
+++ b/src/com/codewithej/Main.java	(date 1680725231265)
@@ -39,7 +39,7 @@
                     // Exit
                     break;
                 default:
-                    System.out.println("Invalid Input");
+                    System.out.println(input + " not a valid option");
             }
 
             if (input != 7) {
Index: src/com/codewithej/car/Car.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.codewithej.car;\r\n\r\npublic class Car {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/codewithej/car/Car.java b/src/com/codewithej/car/Car.java
--- a/src/com/codewithej/car/Car.java	(revision af50b5b9a9cd4992661e1a54e36a3fe5ef2ffcfa)
+++ b/src/com/codewithej/car/Car.java	(date 1680726049736)
@@ -1,4 +1,73 @@
 package com.codewithej.car;
 
+import java.math.BigDecimal;
+import java.util.Objects;
+
 public class Car {
+    private int regNumber;
+    private BigDecimal rentalPricePerDay;
+    private Brand brand;
+    private Boolean electric;
+
+    public Car(int regNumber, BigDecimal rentalPricePerDay, Brand brand, Boolean electric) {
+        this.regNumber = regNumber;
+        this.rentalPricePerDay = rentalPricePerDay;
+        this.brand = brand;
+        this.electric = electric;
+    }
+
+    public int getRegNumber() {
+        return regNumber;
+    }
+
+    public void setRegNumber(int regNumber) {
+        this.regNumber = regNumber;
+    }
+
+    public BigDecimal getRentalPricePerDay() {
+        return rentalPricePerDay;
+    }
+
+    public void setRentalPricePerDay(BigDecimal rentalPricePerDay) {
+        this.rentalPricePerDay = rentalPricePerDay;
+    }
+
+    public Brand getBrand() {
+        return brand;
+    }
+
+    public void setBrand(Brand brand) {
+        this.brand = brand;
+    }
+
+    public Boolean getElectric() {
+        return electric;
+    }
+
+    public void setElectric(Boolean electric) {
+        this.electric = electric;
+    }
+
+    @Override
+    public String toString() {
+        return "Car{" +
+                "regNumber=" + regNumber +
+                ", rentalPricePerDay=" + rentalPricePerDay +
+                ", brand=" + brand +
+                ", electric=" + electric +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Car car = (Car) o;
+        return regNumber == car.regNumber && Objects.equals(rentalPricePerDay, car.rentalPricePerDay) && brand == car.brand && Objects.equals(electric, car.electric);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(regNumber, rentalPricePerDay, brand, electric);
+    }
 }
Index: src/com/codewithej/car/CarType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/codewithej/car/CarType.java b/src/com/codewithej/car/Brand.java
rename from src/com/codewithej/car/CarType.java
rename to src/com/codewithej/car/Brand.java
--- a/src/com/codewithej/car/CarType.java	(revision af50b5b9a9cd4992661e1a54e36a3fe5ef2ffcfa)
+++ b/src/com/codewithej/car/Brand.java	(date 1680725594242)
@@ -1,4 +1,8 @@
 package com.codewithej.car;
 
-public enum CarType {
+public enum Brand {
+    TESLA,
+    BMW,
+    AUDI,
+    MERCEDES
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"1bb52fda-f867-491c-a9c7-88f44de61060\" name=\"Changes\" comment=\"Add my package\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/com/codewithej/booking/Booking.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/com/codewithej/car/Car.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/com/codewithej/car/CarType.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/com/codewithej/user/User.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/com/codewithej/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/com/codewithej/Main.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2O1Kby3Yd1OY7HwLRTLupgvINUk\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"1bb52fda-f867-491c-a9c7-88f44de61060\" name=\"Changes\" comment=\"\" />\r\n      <created>1680722723985</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1680722723985</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Initialization commit\">\r\n      <created>1680722918580</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680722918580</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Add my package\">\r\n      <created>1680723032819</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680723032819</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Initialization commit\" />\r\n    <MESSAGE value=\"Add my package\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Add my package\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision af50b5b9a9cd4992661e1a54e36a3fe5ef2ffcfa)
+++ b/.idea/workspace.xml	(date 1680725594624)
@@ -4,13 +4,13 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="1bb52fda-f867-491c-a9c7-88f44de61060" name="Changes" comment="Add my package">
-      <change afterPath="$PROJECT_DIR$/src/com/codewithej/booking/Booking.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/com/codewithej/car/Car.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/com/codewithej/car/CarType.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/com/codewithej/user/User.java" afterDir="false" />
+    <list default="true" id="1bb52fda-f867-491c-a9c7-88f44de61060" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/com/codewithej/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/codewithej/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/codewithej/booking/Booking.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/codewithej/booking/Booking.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/codewithej/car/Car.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/codewithej/car/Car.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/codewithej/car/CarType.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/codewithej/car/Brand.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/codewithej/user/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/codewithej/user/User.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -39,14 +39,14 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "ASKED_ADD_EXTERNAL_FILES": "true",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
@@ -70,13 +70,21 @@
       <option name="project" value="LOCAL" />
       <updated>1680723032819</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="Create classes and update main logic">
+      <created>1680724686153</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1680724686153</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
     <MESSAGE value="Initialization commit" />
     <MESSAGE value="Add my package" />
-    <option name="LAST_COMMIT_MESSAGE" value="Add my package" />
+    <MESSAGE value="Create classes and update main logic" />
+    <option name="LAST_COMMIT_MESSAGE" value="Create classes and update main logic" />
   </component>
 </project>
\ No newline at end of file
